# version: '2.4'
# version: '3.1'
# version: '3.4'
version: '3.7'

services:
  # # MONGO EXPRESS
  # mongo-express:
  #   image: mongo-express
  #   restart: always
  #   # ports:
  #   #   - 8081:8081
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: ${MongoDB_USERNAME}
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: S{MongoDB_PASSWORD}
  #     ME_CONFIG_MONGODB_URL: mongodb://${MongoDB_USERNAME}:S{MongoDB_PASSWORD}@mongo:27017/
  #   labels:
  #     - 'traefik.enable=true'
  #     # Routers
  #     - 'traefik.http.routers.catapp.rule=Host(`mongo-express.${LOCAL_HOST:-localhost}`)'
  #     # - "traefik.http.routers.mongo-express.rule=Host(`<your-domain-here>`)"
  #     # - 'traefik.http.routers.mongo-express.service=mongo-express'
  #     - 'traefik.http.routers.mongo-express.entrypoints=web'

  #     # - 'traefik.http.routers.mongo-express.middlewares=mongo-e-t-redirectscheme'
  #     - 'traefik.http.routers.mongo-express-secure.rule=Host(`mongo-express.${LOCAL_HOST:-localhost}`)'
  #     - 'traefik.http.routers.mongo-express-secure.entrypoints=websecure'
  #     - 'traefik.http.routers.mongo-express-secure.tls.certresolver=myresolver'
  #     - 'traefik.http.routers.mongo-express-secure.middlewares=mongo-e-t-auth,mongo-e-t-errorpages,mongo-e-t-ratelimit'
  #     # Services
  #     - 'traefik.http.services.mongo-express-secure.loadbalancer.server.port=8081'

  #     # Middleware BasicAuth
  #     - 'traefik.http.middlewares.mongo-e-t-auth.basicauth.users=traefik:$$apr1$$.zPbdVg8$$LcHeyCZElH.JfxkxxlMPI.,user2:$$apr1$$XDrP1Fb1$$SZqSEjvNYW44vgJgI3iEP0'
  #     # user1: traefik password: training
  #     # user2: user2 password: test123
  #     # Create hash password -> echo $(htpasswd -nb user2 test123) | sed -e s/\\$/\\$\\$/g

  #     # Compress Middleware
  #     # - 'traefik.http.middlewares.mongo-e-t-compress.compress=true'
  #     # Error Pages Middleware
  #     - 'traefik.http.middlewares.mongo-e-t-errorpages.errors.status=400-599'
  #     - 'traefik.http.middlewares.mongo-e-t-errorpages.errors.service=error'
  #     - 'traefik.http.middlewares.mongo-e-t-errorpages.errors.query=/{status}.html'
  #     # Rate Limit Middleware
  #     - 'traefik.http.middlewares.mongo-e-t-ratelimit.ratelimit.average=2'
  #     # Redirect Scheme HTTP -> HTTPS
  #     # - 'traefik.http.middlewares.mongo-e-t-redirectscheme.redirectscheme.scheme=https'
  #     # - 'traefik.http.middlewares.mongo-e-t-redirectscheme.redirectscheme.permanent=true'

  # MongoDB
  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MongoDB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: S{MongoDB_PASSWORD}
    ports:
      - '27017:27017'
    volumes:
      - './data/db:/data/db'
      # - mongo:/var/lib/mysql
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo ${LOCAL_HOST:-localhost}:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 3
  #       # start_period: 20s
  #     # move to Atlas for Cloud Distribution in production

  # Express
  mernlama:
    image: mernlama:prod
    # image: mernlama:dev
    build:
      target: prod
      context: expressAPI
      dockerfile: ./Dockerfile
    environment:
      NODE_ENV: production
      MONGO_URL: mongodb://${MongoDB_USERNAME}:S{MongoDB_PASSWORD}@mongo:27017/
      # MONGO_DBNAME: mernlama
    # blocked in production by firewall
    ports:
      - 8800:8800
    depends_on:
      mongo:
        condition: service_healthy
    volumes:
      - ./expressAPI:/usr/src/app
      # - /usr/src/app/node_modules
    healthcheck:
      test: ['CMD', 'npm run test']
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    # logging:
    #   driver: "json-file"
    #   options:
    #     max-size: "10m"
    #     max-file: "3"
    restart: always

  # # React-Nginx
  # rdevops:
  #   image: turtlewolfe/devops:prod
  #   # image: turtlewolfe/devops:dev
  #   build:
  #     target: prod
  #     # target: dev
  #     context: r-frnt
  #     dockerfile: ./Dockerfile
  #   # environment:
  #   # - CI=true
  #   # - NODE_ENV=production
  #   # - LOCAL_HOST=${LOCAL_HOST:-localhost}
  #   # ports:
  #   # - 3000:3000
  #   # depends_on:
  #   #   mongo:
  #   #   mernlama:
  #   #     condition: service_healthy
  #   restart: always
  #   volumes:
  #     # - /usr/src/app/node_modules
  #     - ./r-frnt:/usr/src/app
  #     - ./r-frnt/nginx:/etc/nginx/conf.d
  #     # - ./nginx:/etc/nginx/conf.d
  #     # production build
  #     - ./r-frnt/build:/usr/share/nginx/html
  #     # - ./html:/usr/share/nginx/html
  #   # healthcheck:
  #   #   test: ['CMD', 'CI=true npm run test']
  #   labels:
  #     - 'traefik.enable=true'
  #     # Routers
  #     # We set a label to tell Traefik to assign a hostname to the new service
  #     - 'traefik.http.routers.react.rule=Host(`devops.${LOCAL_HOST:-localhost}`)'
  #     - 'traefik.http.routers.react.entrypoints=web'
  #     - 'traefik.http.routers.react.entrypoints=websecure'
  #     - 'traefik.http.routers.react.tls.certresolver=myresolver'
  #     # - 'traefik.http.routers.react.service=react'
  #     - 'traefik.http.routers.react.middlewares=devops-errorpages,devops-ratelimit'

  #     # Services
  #     # - 'traefik.http.services.react.loadbalancer.server.port=3000'
  #     - 'traefik.http.services.react.loadbalancer.server.port=80'

  #     # Middleware BasicAuth

  #     # Compress Middleware
  #     #   - 'traefik.http.middlewares.devops-compress.compress=true'

  #     # Error Pages Middleware
  #     - 'traefik.http.middlewares.devops-errorpages.errors.status=400-599'
  #     - 'traefik.http.middlewares.devops-errorpages.errors.service=error'
  #     - 'traefik.http.middlewares.devops-errorpages.errors.query=/{status}.html'
  #     # Rate Limit Middleware
  #     - 'traefik.http.middlewares.devops-ratelimit.ratelimit.average=2'
  #     # Redirect Scheme HTTP -> HTTPS
  #   #   - 'traefik.http.middlewares.devops-redirectscheme.redirectscheme.scheme=https'
  #   #   - 'traefik.http.middlewares.devops-redirectscheme.redirectscheme.permanent=true'

  # React-Nginx
  r-frnt:
    # image: turtlewolfe/geolarp:prod
    image: turtlewolfe/geolarp:dev
    build:
      # target: prod
      target: dev
      context: react-social-ui
      dockerfile: ./Dockerfile
    # environment:
    # - CI=true
    # - NODE_ENV=production
    # - LOCAL_HOST=${LOCAL_HOST:-localhost}
    # ports:
    # - 3000:3000
    # depends_on:
    #   mongo:
    #   mernlama:
    #     condition: service_healthy
    restart: always
    volumes:
      # - /usr/src/app/node_modules
      # - ./react-social-ui/build:/usr/share/nginx/html
      # production build
      - ./react-social-ui:/usr/src/app
      - ./react-social-ui/nginx:/etc/nginx/conf.d
      # - ./nginx:/etc/nginx/conf.d
      # - ./r-frnt/build:/usr/share/nginx/html
      # - ./html:/usr/share/nginx/html
    # healthcheck:
    #   test: ['CMD', 'CI=true npm run test']
    labels:
      - 'traefik.enable=true'
      # Routers
      # We set a label to tell Traefik to assign a hostname to the new service
      - 'traefik.http.routers.geolarp.rule=Host(`${LOCAL_HOST:-localhost}`)'
      - 'traefik.http.routers.geolarp.entrypoints=web'
      - 'traefik.http.routers.geolarp.entrypoints=websecure'
      - 'traefik.http.routers.geolarp.tls.certresolver=myresolver'
      # - 'traefik.http.routers.geolarp.service=geolarp'
      - 'traefik.http.routers.geolarp-secure.middlewares=t-geolarp-errorpages,t-geolarp-ratelimit'

      # Services
      - 'traefik.http.services.geolarp.loadbalancer.server.port=3000'
      # - 'traefik.http.services.geolarp.loadbalancer.server.port=80'

      # Middleware BasicAuth

      # Compress Middleware
      #   - 'traefik.http.middlewares.t-geolarp-compress.compress=true'

      # Error Pages Middleware
      - 'traefik.http.middlewares.t-geolarp-errorpages.errors.status=400-599'
      - 'traefik.http.middlewares.t-geolarp-errorpages.errors.service=error'
      - 'traefik.http.middlewares.t-geolarp-errorpages.errors.query=/{status}.html'
      # Rate Limit Middleware
      - 'traefik.http.middlewares.t-geolarp-ratelimit.ratelimit.average=2'
      # Redirect Scheme HTTP -> HTTPS
    #   - 'traefik.http.middlewares.t-geolarp-redirectscheme.redirectscheme.scheme=https'
    #   - 'traefik.http.middlewares.t-geolarp-redirectscheme.redirectscheme.permanent=true'

  # StoryBook-Nginx
  storybook:
    # image: nginx:1.21.3-alpine
    image: turtlewolfe/storybook:prod
    # image: turtlewolfe/storybook:dev
    # networks:
    #   - web
    build:
      target: prod
      # target: dev
      context: react-social-ui
      dockerfile: ./Dockerfile
    volumes:
      # dev:
      # - ./react-social-ui:/usr/src/app
      # prod:
      - ./docs:/usr/share/nginx/html
      - ./react-social-ui/nginx:/etc/nginx/conf.d
    restart: always
    # Here we define our settings for traefik how to proxy our service.
    labels:
      # - 'DevMail=${DEV_MAIL:-joey}'
      # This is enableing treafik to proxy this service
      # We set a label to tell Traefik to assign a hostname to the new service
      - 'traefik.enable=true'
      # Here we have to define the URL
      - 'traefik.http.routers.storybook.rule=Host(`storybook.${LOCAL_HOST:-localhost}`)'
      # Here we are defining wich entrypoint should be used by clients to access this service
      - 'traefik.http.routers.storybook.entrypoints=web'
      - 'traefik.http.routers.storybook.entrypoints=websecure'
      # Here we define in wich network treafik can find this service
      # - "traefik.docker.network=web"
      - 'traefik.http.routers.storybook.tls.certresolver=myresolver'
      # - 'traefik.http.routers.storybook.service=storybook'
      # This is the port that traefik should proxy
      - 'traefik.http.services.storybook.loadbalancer.server.port=80'
      # - 'traefik.http.services.storybook.loadbalancer.server.port=6006'

  # TRAEFIK
  traefik:
    # The latest official supported Traefik docker image
    # image: traefik:v2.3
    image: traefik:v2.5.3
    ports:
      # Exposes port 80 for incomming web requests
      - '80:80'
      - '443:443'
      # The Web UI port http://0.0.0.0:8080 (enabled by --api.insecure=true)
      - '8080:8080'
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
        # Copies the Let's Encrypt certificate locally for ease of backing up
      - ./../letsencrypt:/letsencrypt
      # Mounts the Traefik static configuration inside the Traefik container
      # So that Traefik can read the configuration file
      - ./traefik.yml:/etc/traefik/traefik.yml
    healthcheck:
      test: ['CMD', 'traefik', 'healthcheck']
      interval: 10s
      timeout: 2s
      retries: 3
      start_period: 5s
    # deploy:
    #   labels:
    #     - 'traefik.enable=true'
    #     - 'traefik.http.routers.myproject.rule=Host(`myproject.${LOCAL_HOST:-localhost}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))'

  # WhoAmI
  whoami:
    # A container that exposes an API to show its IP address
    image: containous/whoami
    # We set a label to tell Traefik to assign a hostname to the new service
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.whoami.rule=Host(`whoami.${LOCAL_HOST:-localhost}`)'
      # - 'traefik.http.routers.whoami.entrypoints=web'
      - 'traefik.http.routers.whoami.entrypoints=websecure'
      - 'traefik.http.routers.whoami.tls.certresolver=myresolver'
      - 'traefik.http.routers.whoami.service=whoami'
      - 'traefik.http.services.whoami.loadbalancer.server.port=80'

  # Add the catapp service
  catapp:
    image: mikesir87/cats:1.0
    labels:
      - 'traefik.enable=true'
      # Routers
      - 'traefik.http.routers.catapp.rule=Host(`catapp.${LOCAL_HOST:-localhost}`)'
      # - "traefik.http.routers.catapp.rule=Host(`<your-domain-here>`)"
      # - 'traefik.http.routers.catapp.service=catapp'
      - 'traefik.http.routers.catapp.entrypoints=web'

      - 'traefik.http.routers.catapp.middlewares=test-redirectscheme'
      - 'traefik.http.routers.catapp-secure.rule=Host(`catapp.${LOCAL_HOST:-localhost}`)'
      - 'traefik.http.routers.catapp-secure.entrypoints=websecure'
      - 'traefik.http.routers.catapp-secure.tls.certresolver=myresolver'
      - 'traefik.http.routers.catapp-secure.middlewares=test-compress,test-errorpages,test-ratelimit'
      # Services
      - 'traefik.http.services.catapp-secure.loadbalancer.server.port=5000'

      # Middleware BasicAuth
      # - 'traefik.http.middlewares.test-auth.basicauth.users=traefik:$$apr1$$.zPbdVg8$$LcHeyCZElH.JfxkxxlMPI.,user2:$$apr1$$XDrP1Fb1$$SZqSEjvNYW44vgJgI3iEP0'
      # user1: traefik password: training
      # user2: user2 password: test123
      # Create hash password -> echo $(htpasswd -nb user2 test123) | sed -e s/\\$/\\$\\$/g

      # Compress Middleware
      - 'traefik.http.middlewares.test-compress.compress=true'
      # Error Pages Middleware
      - 'traefik.http.middlewares.test-errorpages.errors.status=400-599'
      - 'traefik.http.middlewares.test-errorpages.errors.service=error'
      - 'traefik.http.middlewares.test-errorpages.errors.query=/{status}.html'
      # Rate Limit Middleware
      - 'traefik.http.middlewares.test-ratelimit.ratelimit.average=2'
      # Redirect Scheme HTTP -> HTTPS
      - 'traefik.http.middlewares.test-redirectscheme.redirectscheme.scheme=https'
      - 'traefik.http.middlewares.test-redirectscheme.redirectscheme.permanent=true'

  # Error Page service
  error:
    image: guillaumebriday/traefik-custom-error-pages
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.error.rule=Host(`error.${LOCAL_HOST:-localhost}`)'
      - 'traefik.http.routers.error.service=error'
      - 'traefik.http.services.error.loadbalancer.server.port=80'
      # - traefik.frontend.rule=PathPrefixStrip:/wait
      - 'traefik.http.routers.error.entrypoints=web'

  # WORDPRESS
  wordpress:
    image: wordpress
    restart: always
    # ports:
    #   - 8080:80
    environment:
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST:-db}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER:-exampleuser}
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD:-examplepass}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME:-exampledb}
    volumes:
      - wordpress:/var/www/html
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.wordpress.rule=Host(`wordpress.${LOCAL_HOST:-localhost}`)'
      # - 'traefik.http.routers.wordpress.entrypoints=web'
      - 'traefik.http.routers.wordpress.entrypoints=websecure'
      - 'traefik.http.routers.wordpress.tls.certresolver=myresolver'
      - 'traefik.http.routers.wordpress.service=wordpress'
      - 'traefik.http.services.wordpress.loadbalancer.server.port=80'

  # MYSQL
  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: ${WORDPRESS_DB_NAME:-exampledb}
      MYSQL_USER: ${WORDPRESS_DB_USER:-exampleuser}
      MYSQL_PASSWORD: ${WORDPRESS_DB_PASSWORD:-examplepass}
      MYSQL_RANDOM_ROOT_PASSWORD: '1'
    volumes:
      - db:/var/lib/mysql
    # labels:
    #   # - 'traefik.enable=true'
    #   # - 'traefik.http.routers.db.rule=Host(`db.${LOCAL_HOST:-localhost}`)'
    #   # - 'traefik.http.routers.db.entrypoints=web'
    #   # - 'traefik.http.routers.db.entrypoints=websecure'
    #   # - 'traefik.http.routers.db.tls.certresolver=myresolver'
    #   # - 'traefik.http.routers.db.service=db'
    #   # - 'traefik.http.services.db.loadbalancer.server.port=3306'

volumes:
  wordpress:
  db:
  # mongo:
