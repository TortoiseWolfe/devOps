# version: '2.4'
# version: '3'
version: '3.4'

services:
  # # MongoDB
  # mongo:
  #   image: mongo
  #   ports:
  #     - '27017:27017'
  #   volumes:
  #     - './data/db:/data/db'
  #   restart: always
  #   healthcheck:
  #     test: echo 'db.runCommand("ping").ok' | mongo geolarp.com:27017/test --quiet
  #     interval: 10s
  #     timeout: 10s
  #     retries: 3
  #     # start_period: 20s
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: ${MongoDB_USERNAME}:janeDoe
  #     MONGO_INITDB_ROOT_PASSWORD: ${MongoDB_PASSWORD}:butterCUPz
  #   # local MongoDB for development
  #   # move to Atlas for Cloud Distribution in production
  #   labels:
  #     # - 'traefik.http.routers.mongo.rule=Host(`mongo.docker.geolarp.com`)'
  #     # We set a label to tell Traefik to assign a hostname to the new service
  #     - 'traefik.enable=true'
  #     - 'traefik.http.routers.mongo.rule=Host(`mongo.docker.geolarp.com`)'
  #     # - 'traefik.http.routers.mongo.service=mongo'
  #     # - 'traefik.http.services.mongo.loadbalancer.server.port=27017'
  #     # - 'traefik.http.routers.mongo.entrypoints=web'
  #     # - 'traefik.http.routers.mongo.entrypoints=websecure'
  #     # - 'traefik.http.routers.mongo.tls.certresolver=myresolver'

  # # Express
  # mernlama:
  #   image: mernlama:prod
  #   # image: mernlama:dev
  #   build:
  #     target: prod
  #     context: expressAPI
  #     dockerfile: ./Dockerfile
  #   environment:
  #     NODE_ENV: production
  #     # NODE_ENV: development
  #     # MONGO_ADMINUSERNAME: ${MongoDB_USERNAME}:janeDoe
  #     # MONGO_ADMINPASSWORD: ${MongoDB_PASSWORD}:butterCUPz
  #     MONGO_URL: mongodb://janeDoe:butterCUPz@mongo:27017/
  #     MONGO_URL: mongodb://${MongoDB_USERNAME}:${MongoDB_PASSWORD}@mongo:27017/
  #     MONGO_DBNAME: mernlama
  #   ports:
  #     - 8800:8800
  #   depends_on:
  #     mongo:
  #       condition: service_healthy
  #   volumes:
  #     - ./expressAPI:/usr/src/app
  #     # - /usr/src/app/node_modules
  #   healthcheck:
  #     test: ['CMD', 'npm run test']
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 5s
  #   # logging:
  #   #   driver: "json-file"
  #   #   options:
  #   #     max-size: "10m"
  #   #     max-file: "3"
  #   restart: always
  #   labels:
  #     # - 'traefik.enable=true'
  #     - 'traefik.http.routers.mernlama.rule=Host(`mernlama.docker.geolarp.com`)'
  #     # - 'traefik.http.routers.mernlama.service=mernlama'
  #     # - 'traefik.http.services.mernlama.loadbalancer.server.port=8800'
  #     # - 'traefik.http.routers.mernlama.entrypoints=web'
  #     # - 'traefik.http.routers.mernlama.entrypoints=websecure'
  #     # - 'traefik.http.routers.mernlama.tls.certresolver=myresolver'

  # React-Nginx
  react:
    image: react:prod
    # image: react:dev
    build:
      # target: prod
      context: r-frnt
      dockerfile: ./Dockerfile
    # environment:
    #   CI: 'true'
    ports:
      # - 3000:3000
      # - 80:80
      - 3000:80
    # depends_on:
    #   mongo:
    #     condition: service_healthy
    restart: always
    volumes:
      # - /usr/src/app/node_modules
      - ./r-frnt:/usr/src/app
      - ./r-frnt/nginx:/etc/nginx/conf.d
      # - ./nginx:/etc/nginx/conf.d
      - ./r-frnt/build:/usr/share/nginx/html
      # - ./html:/usr/share/nginx/html
    healthcheck:
      test: ['CMD', 'CI=true npm run test']
    # depends_on:
    #   mernlama:
    #     condition: service_healthy
    labels:
      # We set a label to tell Traefik to assign a hostname to the new service
      - 'traefik.enable=true'
      - 'traefik.http.routers.react.rule=Host(`geolarp.com`)'
      # - 'traefik.http.routers.react.entrypoints=web'
      - 'traefik.http.routers.react.entrypoints=websecure'
      - 'traefik.http.routers.react.tls.certresolver=myresolver'
      - 'traefik.http.routers.react.service=react'
      - 'traefik.http.services.react.loadbalancer.server.port=3000'

  application:
    image: nginx
    # networks:
    #   - web
    # Here we define our settings for traefik how to proxy our service.
    labels:
      # This is enableing treafik to proxy this service
      # Here we have to define the URL
      - 'traefik.http.routers.myproject.rule=Host(`myproject.geolarp.com`)'
      # Here we are defining wich entrypoint should be used by clients to access this service
      # - 'traefik.http.routers.myproject.entrypoints=web'
      - 'traefik.http.routers.myproject.entrypoints=websecure'
      # Here we define in wich network treafik can find this service
      # - "traefik.docker.network=web"
      # This is the port that traefik should proxy
      - 'traefik.http.routers.myproject.tls.certresolver=myresolver'
      - 'traefik.http.routers.myproject.service=myproject'
      - 'traefik.http.services.myproject.loadbalancer.server.port=80'
      # - 'DevMail=${e_mail}'
    volumes:
      - ./r-frnt/build:/usr/share/nginx/html
      # - ./html:/usr/share/nginx/html
    restart: always

  # TRAEFIK
  traefik:
    # The latest official supported Traefik docker image
    # image: traefik:v2.3
    image: traefik:v2.5.2
    # environment:
    #   - TRAEFIK_API_INSECURE=true
    #   - TRAEFIK_PROVIDERS_DOCKER=true
    #   - TRAEFIK_LOG_LEVEL=INFO
    # command:
    #   #   # Enables the Traefik Dashboard and tells Traefik to listen to docker
    #   - --api.insecure=true
    #   #   # --providers tell Traefik to connect to the Docker provider
    #   - --providers.docker
    #   #   # enable --log.level=INFO so we can see what Traefik is doing in the log files
    #   - --log.level=INFO
    ports:
      # Exposes port 80 for incomming web requests
      - '80:80'
      - '443:443'
      # The Web UI port http://0.0.0.0:8080 (enabled by --api.insecure=true)
      - '8080:8080'
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
        # Copies the Let's Encrypt certificate locally for ease of backing up
      # - ./letsencrypt:/letsencrypt
      # Mounts the Traefik static configuration inside the Traefik container
      - ./traefik.yml:/etc/traefik/traefik.yml
      # So that Traefik can read the configuration file
      # - ./traefik.toml:/traefik.toml

  # WhoAmI
  whoami:
    # A container that exposes an API to show its IP address
    image: containous/whoami
    # We set a label to tell Traefik to assign a hostname to the new service
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.whoami.rule=Host(`whoami.geolarp.com`)'
      # - 'traefik.http.routers.whoami.entrypoints=web'
      - 'traefik.http.routers.whoami.entrypoints=websecure'
      - 'traefik.http.routers.whoami.tls.certresolver=myresolver'
      - 'traefik.http.routers.whoami.service=whoami'
      - 'traefik.http.services.whoami.loadbalancer.server.port=80'

  # Add the catapp service
  catapp:
    image: mikesir87/cats:1.0
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.catapp.rule=Host(`catapp.geolarp.com`)'
      # - 'traefik.http.routers.catapp.entrypoints=web'
      - 'traefik.http.routers.catapp.entrypoints=websecure'
      - 'traefik.http.routers.catapp.tls.certresolver=myresolver'
      - 'traefik.http.routers.catapp.service=catapp'
      - 'traefik.http.services.catapp.loadbalancer.server.port=5000'
